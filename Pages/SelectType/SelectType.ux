<DefaultPage ux:Class="SelectType">

<Router ux:Dependency="router" />


<JavaScript> 
    var Observable = require("FuseJS/Observable");
    var activeUrl = require("Constants/SERVICE_URL.js"); 
    var Types = require("Constants/Types.js"); 
    console.log("TIPOVI", JSON.stringify(Types.types.value)); 
    var allTypes = Types.types.value; 
    exports.values = Observable(); 
    var savedTreatments;// = Observable(); 
    var flag = 0;  
    var finalData = []; 
    exports.list = Observable("") 
    var selektirani = Observable("");  
    var patientId=""; 
    var providerId; 
    var Storage = require("FuseJS/Storage"); 
    var lista = [];  
    var userInfo = JSON.parse(Storage.readSync("userInfo")); 
    var templateName=""; 
    var subtreatmentid="";
    var SubtreatmentIdOnEDIT="0";
    var active=Observable("false");
    // var name = "MOKI"; 
    //var patientName = {name:"MOKIIII"}; 
    var name = Observable();
    providerId= JSON.stringify(userInfo.providerId);
    
    exports.values.onValueChanged( module, function() {        
        exports.list.value = exports.values.toArray().join(",") 
        console.log("OVA "+exports.list.value);
        exports.values = selektirani;
     })

    this.onParameterChanged(function(param) { 

        selektirani.clear(); 
        finalData=[];
        templateName="";
        subtreatmentid="";
        SubtreatmentIdOnEDIT="0";

        //patientId = JSON.stringify(param.user.patientId);
        console.log('On Parameter changed vo selectType:'+JSON.stringify(param)); 
        // KOGA DOAGJA OD SAVEDTREATMENTS
        if("savedTreatments" in param){
            active.value = "true"; 
            console.log("TUKA OD SELEKT TYPE SHOW TEMPLATE:"+active);// dali da se pokazhuva kopche load template
            for(var i = 0 ; i < param.savedTreatments.length; i++){

                if(!param.savedTreatments[i].num){

                    if(param.savedTreatments[i].id){
                        console.log("VO IF if id"+param.savedTreatments[i].id);
                    }
                    
                    else if(param.savedTreatments[i].name){
                        selektirani.add(param.savedTreatments[i].name);
                        finalData[i] = param.savedTreatments[i];
                        SubtreatmentIdOnEDIT = param.savedTreatments[i].subtreatmentid;
                    }

                    else if(param.savedTreatments[i].templateName){
                       // console.log("VO ELSEIF nameTemplate"+param[i].templateName);
                        templateName = param.savedTreatments[i].templateName;
                       // console.log("VO ELSEIF nameTemplate**"+templateName);
                    }
                    else if(param.savedTreatments[i].num1){
                        
                    }
                    else if(param.savedTreatments[i].subtreatmentid){
                       // console.log("TUKA SE DOAGJA VO SUBTREATMENT ID :"+param.savedTreatments[i].subtreatmentid);
                        SubtreatmentIdOnEDIT = param.savedTreatments[i].subtreatmentid;
                    }
                    else if(param.savedTreatments[i].patientId){

                    }                          
                    
                }
            } 

        }


///// koga doagja od page ALERTPAGE
        else if(param.user.length > 1){
            active.value="false";// dali da se pokazhuva kopche load template
             console.log("TUKA OD ALERT PAGE SHOW TEMPLATE:"+active);
            console.log("doagja od page ALERTPAGE");
            console.log(JSON.stringify(param));
          //  console.log('If param length > 0:'+JSON.stringify(param)); 
            for(var i = 0 ; i < param.user.length; i++){
                if(param.user[i].patientId){
                    patientId = param.user[i].patientId;
                    console.log("tuka patientid:"+patientId);
                    Storage.write("patientId", JSON.stringify(patientId));
                }
                else if(param.user[i].subtrementID){
                    SubtreatmentIdOnEDIT = param.user[i].subtrementID;
                } 
                else if (param.user[i].fullName){
                    name.value = param.user[i].fullName
                }
            }

            ///// kod za selekcija na tabovite vo select type
            for(var i = 0 ; i < param.user.length; i++){
                console.log("VO FOOOOR"+JSON.stringify(param.user[i]));
                if(!param.user[i].num){
                    if(param.user[i].id){
                        console.log("VO IF if id"+param.user[i].id);
                    }
                    else if(param.user[i].templateName){
                       // console.log("VO ELSEIF nameTemplate"+param[i].templateName);
                        templateName = param.user[i].templateName;
                       // console.log("VO ELSEIF nameTemplate**"+templateName);
                    }
                    else if(param.user[i].num1){
                    }
                    else if(param.user[i].subtrementID){
                        //console.log(" vo else if select type subtreatmentid: "+param[i]);
                       SubtreatmentIdOnEDIT = param.user[i].subtrementID;
                    }
                    else if(param.user[i].patientId){

                    }

                        else if (param.user[i].fullName){
                            name.value = param.user[i].fullName
                        }
                    else{
                        console.log("VO IF else"+param.user[i].name);
                        selektirani.add(param.user[i].name);
                        finalData[i] = param.user[i];
                    }
                    
                }
            } 
        } // kraj 

        /// koga doagja od CONTACTS
        else if("user" in param){
            active.value="true";// dali da se pokazhuva kopche load template
            console.log("TUKA OD CONTACT - :"+active);
            patientId = JSON.stringify(param.user.patientId);
            console.log(JSON.stringify(param.user.fullName));
            name.value = param.user.fullName;
            Storage.write("patientId", JSON.stringify(patientId));
            subtreatmentid = param.user.subtreatmentid;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////
            console.log("PRED FOR PATIENTID "+patientId);
            console.log("POSLE FOR selektirani "+JSON.stringify(selektirani));
    });

    
  
    // ADD SELECTED ITEM 
    function AddSelectedItem(item){
        for(var i = 0 ; i < item.data.length; i++){
             selektirani.add(item[i]);
        }
    }

    function goToSavedTreatments(e) {  
        lista=[]; 


        var url = activeUrl.URL + "/curandusproject/webapi/api/getsavedtreatmenttemplatebyprovider/"+providerId 
        console.log(url); 
        fetch(url, { 
            method: 'GET', 
            headers: { 
                "Content-type": "application/json" 
            },
            dataType: 'json' 
        }).then(function(response) {  
            status = response.status; // Get the HTTP status code  
            response_ok = response.ok; // Is response.status in the 200-range?  
            return response.json(); // This returns a promise  
        }).then(function(data) {
            var tmp ={};
            for (var i = 0; i < data.length; i++) { 
                tmp = { 
                    "savedTreatmentTemplateId":data[i].savedTreatmentTemplateId, 
                    "nameTreatment":data[i].nameTreatment,                      
                    "created":data[i].created,                          
                    "createdBy":data[i].createdBy,                           
                    "modified":data[i].modified,                               
                    "modifiedBy":data[i].modifiedBy,                            
                    "providerDetail":data[i].providerDetail                
                } 
                lista[i] = tmp; 
            } 

            lista[lista.length] = {"name":name.value} 
        router.push("savedTreatment",  lista ); 
        }).catch(function(err) { 
            console.log("Fetch data error"); 
            console.log(err.message); 
        }); 
    }


    function goToSelectItems(){       
        var sendData = [{}];
        var flag=0;
        console.log("SELEKTIRANI TUKAAAAAAAAA: "+JSON.stringify(selektirani))
        //console.log("FINAL DATA TUKAAAAAAAAA: "+JSON.stringify(selektirani))
        for(var i = 0 ; i < selektirani.length; i++){ //za nizata na tie shto gi doselektiral da se napravat objekti kako vratenite od templejtot vo finalData
           for(var j = 0; j < finalData.length; j++){
                //console.log("ELEMENT I VO FOR J: "+selektirani.getAt(i));
                //console.log("ELEMENT I:"+selektirani.getAt(i)+"--ELEMENT J:"+finalData[j].name+'---');
                
                if(selektirani.getAt(i).localeCompare(finalData[j].name) == 0){
                    if(flag == 0){
                            var tmp1 = {
                            "name": finalData[j].name,
                            "duration": finalData[j].duration,
                            "createdBy": finalData[j].createdBy,
                            "treatmentItemId": finalData[j].treatmentItemId,
                            "subtreatmentid": finalData[j].subtreatmentid,
                            "created": finalData[j].created,
                            "modified": finalData[j].modified,
                            "modifiedBy": finalData[j].modifiedBy,
                            "typeT": finalData[j].typeT,
                            "repeatT": finalData[j].repeatT,
                            "renderingInfo": finalData[j].renderingInfo
                            }
                        sendData[i] = tmp1;
                        flag = 1;
                        //console.log(" IMA IST ELEMENT:  "+selektirani.getAt(i)+" SO:"+finalData[j].name);
                        break;
                    }
                }
            } // for J
               
             //console.log("***********************************************");
            if(flag == 0){
                 //console.log("AKO SELEKTIRANO i flag=0:  "+selektirani.getAt(i));
                var tmp = {
                    "name": selektirani.getAt(i), 
                    "duration": null, 
                    "createdBy": 0, 
                    "treatmentItemId": 0, 
                    "subtreatmentid": 0, 
                    "created": null, 
                    "modified": null, 
                    "modifiedBy": 0, 
                    "typeT": "", 
                    "repeatT": "", 
                    "renderingInfo": null 
                }
                sendData[i] = tmp;
            }
            //console.log("NA KRAJ  "+selektirani.getAt(i)); 
            flag = 0;

        }// for i
        //console.log("FINISH: "+JSON.stringify(sendData));
        console.log("PRED DA SE PRATI DO SELECT ITEMS: "+patientId);
        sendData[sendData.length] = {"patientId":patientId }
        sendData[sendData.length] = {"templateName":templateName }
        sendData[sendData.length] = {"SubtreatmentIdOnEDIT":SubtreatmentIdOnEDIT }
        
        //console.log("OVA E PATIENTID: "+Storage.readSync("patientId"));
        console.log("Data koja se prakja do SelectItems ( kartite ) "+JSON.stringify(sendData));
        console.log("Length na data koja se prakja do SelectItems ( kartite ) "+sendData.length);
        
        router.push("SelectItems", { sendData });   //  TUKA TREBA DA PREMINA NA SELECTITEM
    }
    
    module.exports = { 
        goToSelectItems:goToSelectItems, 
        goToSavedTreatments:goToSavedTreatments, 
        selektirani:selektirani, 
        AddSelectedItem:AddSelectedItem , 
        savedTreatments:savedTreatments , 
        name:name ,
        allTypes:allTypes,
        active:active
    } 
    
    
</JavaScript>



<!-- **************** Treatment item   **************** -->
<Rectangle ux:Class="MyItem" Color="primary" CornerRadius="7" Width="65%"  Alignment="Center" Height="60" Margin="  0,10,0,0" HitTestMode="LocalBounds" Clicked="{AddSelectedItem}">  
    <string ux:Property="Label"/> 
    <string ux:Property="Value"/> 

    <Selectable Value="{ReadProperty this.Value}"/> 
   
    <WhilePressed>
        <Scale Factor="1.3" Duration="0.2"/> 
    </WhilePressed>
    <Text ux:Name="text" Color="White" Font="regular" FontSize="16" Value="{ReadProperty this.Label}" Alignment="Center"/> 
    <DropShadow/>  
    <WhileSelected> 
        <Change this.Color="#0097A7" Duration="0.2"/> 
    </WhileSelected> 
    <Tapped>  
        <ToggleSelection /> 
    </Tapped> 

</Rectangle>  

<!-- **************** Tabs   **************** -->
<Rectangle ux:Class="TabName" Color="primary_dark" Width="100%" > 
    <string ux:Property="Label"/> 
    <string ux:Property="Value"/> 
    <Selectable Value="{ReadProperty this.Label}"/>
    <Text Alignment="CenterLeft"  Font="regular" Color="White" Margin="10,0,0,0" Value="{ReadProperty this.Label}" />
    
</Rectangle>


<!-- **************** Tabs1   **************** -->
<Rectangle ux:Class="TabName1" Color="primary_dark" Width="100%" > 
    <string ux:Property="Label"/>
    <float4 ux:Property="TextColor"/>
    <Selectable Value="{ReadProperty this.Label}"/>
    <DockPanel>
        <Icon FontSize="24" Color="{ReadProperty this.TextColor}" Dock="Right" Alignment="Center" Margin="0,0,8,0">&#xE873;</Icon>
        <Text Alignment="CenterRight" Color="{ReadProperty this.TextColor}"  Dock="Right"   Font="regular"  Value="{ReadProperty this.Label}" />
        <WhilePressed>
            <Scale Factor="1.1" Duration="0.2"/>
        </WhilePressed>
    </DockPanel>
    
</Rectangle>


    <DockPanel>
        <Toolbar Color="primary" Title="{name}" HasBackButton="True" router="router"> 
            <!-- <Rectangle Height="1" Alignment="Bottom">
                <SolidColor Color="White"/>
            </Rectangle> -->
        </Toolbar>

        
        <Rectangle Alignment="Top" Height="45" Width="100%">
            <Grid Columns="1*,1*" >
                <Selection Value="Types"/>
                <TabName Label="Types" ></TabName>
                <Match Value="{active}">
                    <Case String="true">
                        <TabName1 TextColor="future" Clicked="{goToSavedTreatments}" Label="Load"></TabName1>
                    </Case>
                    <Case String="false">
                        <TabName1  Label="LOAD" TextColor="future"></TabName1>
                    </Case>
                </Match>   
            </Grid>
            <DropShadow/> 
        </Rectangle> 
        

        <Rectangle Color="background_color">  
            
            <FloatingButton Alignment="BottomRight" BtnColor="#FF5722CC" BtnIcon="&#xE409;" Clicked="{goToSelectItems}" BtnTextColor="icons" /> 
            
            <ScrollView Margin="0,60,0,0"> 
                <StackPanel>
                    <Selection Values="{selektirani}"/> 

                    <Each Items="{allTypes}">
                        <MyItem Label="{label}" Value="{id}"/> 
                    </Each>

                <!-- 
                    <MyItem Label="Blood Pressure Check" Value="2"/> 
                    <MyItem Label="Pulse Check" Value="3"/> 
                    <MyItem Label="Pain Level" Value="4"/> 
                    <MyItem Label="Medicines" Value="5"/> 
                    <MyItem Label="Send Image" Value="6"/>
                    <MyItem Label="Comparison With Picture" Value="7"/>  
                    <MyItem Label="Diet" Value="8"/> 
                    <MyItem Label="Activity" Value="9"/> 
                    <MyItem Label="Hygiene" Value="10"/> 
                    <MyItem Label="Other Instructions" Value="11"/>  
                -->
                   
                </StackPanel>
            </ScrollView>
        </Rectangle>

    </DockPanel>


</DefaultPage>